type VerifiedIdentity {
  owner: String!
  verified: Boolean!
  verifiedAtEpochMs: Float!
  verificationMethod: String!
  canAttemptVerificationAgain: Boolean!
  idScanUrl: String
  requiredVerificationMethod: String
  acceptableDocumentTypes: [String!]!
  documentVerificationStatus: String!
  verificationLastAttemptedAtEpochMs: Float!
  attemptsRemaining: Int!
  consented: Boolean
}

input VerifyIdentityInput {
  verificationMethod: String!
  firstName: String!
  lastName: String!
  address: String!
  city: String
  state: String
  postalCode: String!
  country: String!
  dateOfBirth: String!
}

input VerifyIdentityDocumentInput {
  verificationMethod: String!
  imageBase64: String!
  backImageBase64: String!
  faceImageBase64: String
  country: String!
  documentType: String!
}

type IdentityVerificationCapabilities {
  supportedCountries: [String!]!
  faceImageRequiredWithDocumentCapture: Boolean!
  faceImageRequiredWithDocumentVerification: Boolean!
  canInitiateDocumentCapture: Boolean!
  consentRequired: Boolean!
}

type IdentityDocumentCaptureInitiationResponse {
  documentCaptureUrl: String!
  expiryAtEpochSeconds: Float!
}

input IdentityDataProcessingConsentContentInput {
  preferredContentType: String!
  preferredLanguage: String!
}

type IdentityDataProcessingConsentContent {
  content: String!
  contentType: String!
  language: String!
}

type IdentityDataProcessingConsentStatus {
  consented: Boolean!
  consentedAtEpochMs: Float
  consentWithdrawnAtEpochMs: Float
  content: String
  contentType: String
  language: String
}

input IdentityDataProcessingConsentInput {
  content: String!
  contentType: String!
  language: String!
}

type IdentityDataProcessingConsentResponse {
  processed: Boolean!
}

type Mutation {
  verifyIdentity(input: VerifyIdentityInput): VerifiedIdentity
  verifyIdentityDocument(input: VerifyIdentityDocumentInput): VerifiedIdentity
  captureAndVerifyIdentityDocument(
    input: VerifyIdentityDocumentInput
  ): VerifiedIdentity
  initiateIdentityDocumentCapture: IdentityDocumentCaptureInitiationResponse
  provideIdentityDataProcessingConsent(
    input: IdentityDataProcessingConsentInput
  ): IdentityDataProcessingConsentResponse
  withdrawIdentityDataProcessingConsent: IdentityDataProcessingConsentResponse
}

type Query {
  checkIdentityVerification: VerifiedIdentity
  getIdentityVerificationCapabilities: IdentityVerificationCapabilities
  getIdentityDataProcessingConsentContent(
    input: IdentityDataProcessingConsentContentInput
  ): IdentityDataProcessingConsentContent
  getIdentityDataProcessingConsentStatus: IdentityDataProcessingConsentStatus
}
