// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        agp_version = '8.12.0'
        kotlin_version = '2.1.0'
        amplify_version = '2.19.2'
        aws_version = '2.81.0'
        dokka_version = '2.0.0'
    }

    repositories {
        google()
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$agp_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jmailen.gradle:kotlinter-gradle:5.2.0"
        classpath "org.owasp:dependency-check-gradle:12.1.3"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:6.2.0.5505"
        classpath "gradle.plugin.com.cookpad.android.plugin:plugin:1.2.8"
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "com.apollographql.apollo" version "4.3.2"
}

ext {
    projectGroup = 'com.sudoplatform'
}

if(project.file("${rootProject.projectDir}/util/internal-repo.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/internal-repo.gradle"
}
else {
    ext["internalRepoUsername"] = ""
    ext["internalRepoPassword"] = ""
    ext["internalSnapshotRepoUrl"] = ""
    ext["internalSnapshotRepoName"] = ""
    ext["internalReleaseRepoUrl"] = ""
    ext["internalReleaseRepoName"] = ""
    ext["sonatypeStagingProfileId"] = ""
}

if (project.hasProperty("ossIndexUsername")) {
    ext["ossIndexUsername"] = "$ossIndexUsername"
} else {
    ext["ossIndexUsername"] = ""
}

if (project.hasProperty("ossIndexPassword")) {
    ext["ossIndexPassword"] = "$ossIndexPassword"
} else {
    ext["ossIndexPassword"] = ""
}

if (project.findProperty("tag") && sonatypeStagingProfileId) {
    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
                stagingProfileId = sonatypeStagingProfileId
                username = nexusUsername
                password = nexusPassword
            }
        }
    }
}

allprojects {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        if (internalRepoUsername?.trim()) {
            maven {
                name = internalSnapshotRepoName
                url = internalSnapshotRepoUrl
                credentials {
                    username = internalRepoUsername
                    password = internalRepoPassword
                }
            }
            maven {
                name = internalReleaseRepoName
                url = internalReleaseRepoUrl
                credentials {
                    username = internalRepoUsername
                    password = internalRepoPassword
                }
            }
        }
    }
    gradle.projectsEvaluated {
        tasks.withType(Test).tap {
            configureEach {
                outputs.upToDateWhen { false }
                // Force gradle to run unit tests even if everything is up to date
            }
        }
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}
